name: Build and Push Backend Docker Image

on:
  push:
    branches:
      - main
  pull_request :
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java (JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Grant execute permission for Gradle wrapper
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew

      - name: Build and run tests
        run: ./gradlew clean test

      # Step 4: Build the Spring Boot app (bootJar generates app.jar)
      - name: Build backend JAR
        run: ./gradlew clean bootJar -x test

      # Step 5: Verify the JAR was created
      - name: List built JAR
        run: ls -l build/libs

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            harinisaravanavel/backend:latest
            harinisaravanavel/backend:${{ github.sha }}
            
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Step 1: Create a Docker network (if not exists)
            docker network inspect app-network >/dev/null 2>&1 || docker network create app-network

            # Step 2: Start MySQL container (if not running)
            if [ ! "$(docker ps -q -f name=mysql-db)" ]; then
              if [ "$(docker ps -aq -f status=exited -f name=mysql-db)" ]; then
                docker rm mysql-db
              fi
              docker run -d \
                --name mysql-db \
                --network app-network \
                -e MYSQL_ROOT_PASSWORD=Usernameroot@11 \
                -e MYSQL_DATABASE=taskhub \
                -p 3306:3306 \
                --restart unless-stopped \
                mysql:8.0
            fi

            # Step 3: Deploy backend container
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker stop backend || true
            docker rm backend || true
            docker run -d \
              --name backend \
              --network app-network \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db:3306/taskhub \
              -e SPRING_DATASOURCE_USERNAME=root \
              -e SPRING_DATASOURCE_PASSWORD=Usernameroot@11 \
              ${{ secrets.DOCKER_USERNAME }}/backend:latest
